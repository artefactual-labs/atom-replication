---
#
# Create sync folder in all involved server
#
- name: "Create atom sync folder"
  hosts: "all"
  gather_facts: False
  become: "true"
  tasks:
    - name: "Create folder"
      file: 
        path: "{{ replication_path }}"
        state: "directory"
    - name: "get current date and time string"
      command: "date +%Y%m%d-%H%M%S"
      run_once: true
      register: date_result
    - name: "Create replication subfolder"
      file:
        path: "{{ replication_path }}/{{ date_result.stdout }}"
        state: directory
    - name: "Create replication symlink"
      file:
        src: "{{ replication_path }}/{{ date_result.stdout }}"
        dest: "{{ replication_path }}/last"
        state: link
        force: yes
          
#
#  Configure ES snapshots in both servers
#  (Only needed the first time)
#
- name: "Setup Elasticsearch snapshot repository"
  hosts: "atom_es_source_site,atom_es_destination_site"
  become: "yes"
  gather_facts: False
  tags: ["atom-repository"]
  roles:
    - role: "atom-repository-config"
      es_server_ip: "{{ es_source_site.server }}"
      es_server_port: "{{ es_source_site.port }}"
      es_path_repo: "{{ elasticsearch_repo_path }}"
      es_repo_name: "{{ elasticsearch_repo_name }}"
      when: configure_elasticsearch|bool
#
# Create ES snapshot for source site
#
- name: "Take snapshots"
  hosts: "atom_es_source_site"
  gather_facts: False
  tags: ["atom-snapshot"]
  pre_tasks:
    - name: "Get partion disk usage for /var/lib/elasticsearch"
      become: "yes"
      shell: "df -h /var/lib/elasticsearch | tail -n +2 |  sed s/%//g |  awk '{ print $5 }'"
      register: "elastic_path_disk_usage"
      failed_when: "elastic_path_disk_usage.stderr != ''"

    - name: "Fail when disk usage in greater than 90% on ElasticSearch data partition"
      fail:
        msg: "Error: /var/lib/elasticsearch is located in a partition with {{ elastic_path_disk_usage.stdout }}% disk usage"
      when: elastic_path_disk_usage.stdout|int > 80

    - name: "Get partion disk usage for /replication"
      become: "yes"
      shell: "df -h /replication | tail -n +2 |  sed s/%//g |  awk '{ print $5 }'"
      register: "es_replication_path_disk_usage"
      failed_when: "es_replication_path_disk_usage.stderr != ''"

    - name: "Fail when disk usage in greater than 70% on /replication"
      fail:
        msg: "Error: /replication is located in a partition with {{ es_replication_path_disk_usage.stdout }}% disk usage"
      when: es_replication_path_disk_usage.stdout|int > 70

  roles:
    - role: "atom-snapshot"
      become: "yes"
      es_server_ip: "{{ es_source_site.server }}"
      es_server_port: "{{ es_source_site.port }}"
      es_path_repo: "{{ elasticsearch_repo_path }}"
      es_repo_name: "{{ elasticsearch_repo_name }}"
      es_index_name: "{{ es_source_site.index }}"
      es_snapshot_name: "{{ elasticsearch_snapshot_name }}"

  tasks: 
    - name: "Fetch ES backup"
      fetch: 
        src: "{{ atom_sync_folder }}/snapshot.tgz"
        dest: "replication/snapshot.tgz"
        flat: "true"

#
# Create mysql dump for source site
#
- name: "Create mysqldump and get it"
  hosts: "atom_mysql_source_site"
  gather_facts: False
  vars:
    atom_mysql_user: "{{ atom_source_site.atom_db_user }}"
    atom_mysql_password: "{{ atom_source_site.atom_db_password }}"
    atom_mysql_host: "{{ atom_source_site.atom_db_host }}"
    atom_mysql_db: "{{ atom_source_site.atom_db_name }}"
  tasks:
    - name: "Get partion disk usage for /mnt/mysqlbackup"
      become: "yes"
      shell: "df -h  /mnt/mysqlbackup | tail -n +2 |  sed s/%//g |  awk '{ print $5 }'"
      register: "mysql_backup_path_disk_usage"
      failed_when: "mysql_backup_path_disk_usage.stderr != ''"

    - name: "Fail when disk usage in greater than 80% on /mnt/mysqlbackup"
      fail:
        msg: "Error: /mnt/mysqlbackup is located in a partition with {{ mysql_backup_path_disk_usage.stdout }}% disk usage"
      when: mysql_backup_path_disk_usage.stdout|int > 80

    - name: "Create source mysqldump"
      become: "yes"
      mysql_db:
        name: "{{ atom_source_site.atom_db_name }}"
        state: dump
        target: "{{ atom_sync_folder }}/{{ atom_mysql_db }}.sql.gz"

    - name: "Fetch mysql backup"
      fetch: 
        src: "{{ atom_sync_folder }}/{{ atom_source_site.atom_db_name }}.sql.gz"
        dest: "replication/"
        flat: "true"

#
# Restore es snapshot in destination site
# 
- name: "Restore ES snapshot"
  hosts: "atom_es_destination_site"
  tags: ["atom-restore"]
  gather_facts: False
  become: yes
  pre_tasks: 
    - name: "Transfer ES backup"
      copy: 
        src: "replication/snapshot.tgz"
        dest: "{{ atom_sync_folder }}/snapshot.tgz"
        owner: "elasticsearch"
  roles:
    - role: "atom-restore"
      es_server_ip: "{{ es_dest_site.server }}"
      es_server_port: "{{ es_dest_site.port }}"
      es_path_repo: "{{ elasticsearch_repo_path }}"
      es_repo_name: "{{ elasticsearch_repo_name }}"
      es_index_name: "{{ es_source_site.index }}"
      es_dest_index_name: "{{ es_dest_site.index }}"
      es_snapshot_name: "{{ elasticsearch_snapshot_name }}"

#
# Restore mysql database in destination site
#
- name: "Restore mysql snapshot"
  hosts: "atom_mysql_destination_site"
  tags: ["atom-restore-mysql"]
  gather_facts: False
  become: yes
  tasks:
    - name: "Transfer mysql backup"
      copy: 
        src: "replication/{{ atom_source_site.atom_db_name }}.sql.gz"
        dest: "{{ atom_sync_folder }}/"

    - name: "Restore mysql database"
      shell: "zcat {{ atom_sync_folder }}/{{ atom_source_site.atom_db_name }}.sql.gz | mysql {{ atom_dest_site.atom_db_name }}"

    - name: "Restore site url"
      shell: |
         echo 'update setting_i18n set value="{{ atom_dest_url }}"  where id=152 and culture="en";' |
             mysql "{{ atom_dest_site.atom_db_name }}"
      when: atom_dest_url is defined


#   Site url id can be obtained by:
#    select s.id from setting s inner join setting_i18n si on s.id=si.id and s.name='siteBaseUrl'
#    update setting_i18n set value='https://dpas-atom-public.ad.umanitoba.ca' where id=152 and culture='en';
#

- name: "Clear caches"
  hosts: "atom_destination_site"
  tags: ["atom-restore-objects"]
#  become: "yes"
  gather_facts: False
  tasks:
    - name: "Clear atom cache"
      become: true
      command: "php symfony cache:clear"
      args:
        chdir: "/usr/share/nginx/atom/src/"
      tags:
        - "clear-cache"

    - name: "Restart services"
      become: true
      service:
        name: "{{ item }}"
        state: "restarted"
      with_items:
        - "{{ atom_services }}"
      tags:
        - "atom-services"
